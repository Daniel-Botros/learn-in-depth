/*
 * fifo.c
 *
 *  Created on: Dec 5, 2023
 *      Author: Daniel
 */

#include "fifo.h"

//fifo APIS

FIFO_BUF_Status FIFO_init (FIFO_Buf_t* fifo, element_type* buf, uint32_t length){
	if (buf == NULL)
		return FIFO_Null;

	fifo->length = length;
	fifo->base = buf;
	fifo->head = buf;
	fifo->tail = buf;
	fifo->count = 0;

	return FIFO_no_error;
}
FIFO_BUF_Status FIFO_enqueue (FIFO_Buf_t* fifo, element_type item){
	if (!fifo->base || !fifo->head || !fifo->tail)
			return FIFO_Null;
	if(FIFO_IS_FULL(fifo)==FIFO_full)
		return FIFO_full;
	*(fifo->head) = item;
	fifo->count ++;

	//circler fifo
	if(fifo->head == (fifo->base + (fifo->count*sizeof(element_type))))
		fifo->head = fifo->base;
	else
		fifo->head++;

	return FIFO_no_error;
}
FIFO_BUF_Status FIFO_dequeue (FIFO_Buf_t* fifo, element_type* item){
	if (!fifo->base || !fifo->head || !fifo->tail)
				return FIFO_Null;
	return FIFO_no_error;
}
FIFO_BUF_Status FIFO_IS_FULL (FIFO_Buf_t* fifo){
	if (!fifo->base || !fifo->head || !fifo->tail)
				return FIFO_Null;

	if (fifo->count == fifo->length)
		return FIFO_full;

	return FIFO_no_error;
}
FIFO_BUF_Status FIFO_print (FIFO_Buf_t* fifo){
	if (!fifo->base || !fifo->head || !fifo->tail)
				return FIFO_Null;

	return FIFO_no_error;
}

